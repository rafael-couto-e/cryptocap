plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id('io.gitlab.arturbosch.detekt').version('1.17.1')
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "br.eti.rafaelcouto.cryptocap"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField "String", "API_KEY", "\"2ec8b9db-3efc-483e-a736-d5365813a50e\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    dataBinding {
        enabled = true
    }
}

configurations {
    ktlint
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
}

check.dependsOn ktlint, detekt

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}

detekt {
    buildUponDefaultConfig = true
    allRules = false

    reports {
        html.enabled = true
        xml.enabled = false
        txt.enabled = true
        sarif.enabled = false
    }
}

dependencies {

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"

    // Android
    implementation "androidx.core:core-ktx:$versions.corektx"
    implementation "androidx.appcompat:appcompat:$versions.appcompat"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"

    // Material and UI
    implementation "com.google.android.material:material:$versions.material"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraint"
    implementation "androidx.recyclerview:recyclerview:$versions.recyclerview"
    implementation "androidx.cardview:cardview:$versions.cardview"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navigation"

    // DI
    implementation "io.insert-koin:koin-core:$versions.koin"

    // Network
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$versions.retrofit"

    // Room
    kapt "androidx.room:room-compiler:$versions.room"
    implementation "androidx.room:room-runtime:$versions.room"
    implementation "androidx.room:room-ktx:$versions.room"

    // Verification
    ktlint("com.pinterest:ktlint:$versions.ktlint") {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }

    // Unit tests
    testImplementation "junit:junit:$versions.junit"
    testImplementation "androidx.test.ext:truth:$versions.truth"
    testImplementation "io.mockk:mockk:$versions.mockk"
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"
    testImplementation "io.insert-koin:koin-test:$versions.koin"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutines"
    testImplementation "androidx.room:room-testing:$versions.room"

    // UI Tests
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
}
